---
- hosts: localhost
  connection: local
  gather_facts: False

  vars:
    
    ec2_access_key: "Please enter aws_access_key of Ansible user"
    ec2_secret_key: "Please enter aws_secret_key of Ansible user"
    id: "SecloreAssign" #Project Name
    key_name: "id_rsa"
    vpc_name: "{{ id }}-VPC"
    igw_name: "{{ id }}-IGW"
    subnet_name: "{{ id }}-Subnet"
    acl_name: "{{ id }}-ACL"
    security_group_name: "{{ id }}-Security Group"
    route_table_name: "{{ id }}-route table"
    vpcCidrBlock: '10.0.0.0/16' #CIDR for VPC
    subNetCidrBlock: '10.0.1.0/24' #CIDR for Subnet
    port22CidrBlock: '0.0.0.0/0' #CIDR for Security Group
    destinationCidrBlock: '0.0.0.0/0' #CIDR for ACL and Route Table
    state: 'present'
    region: us-west-2 #US West Oregon
    image:  ami-01e78c5619c5e68b4 #RHEL 8
    
    
  tasks:
  
# create a vpc with name, cidr block,dns support, and tenancy
   - name: create a new ec2 VPC
     ec2_vpc_net:
       aws_access_key: "{{ ec2_access_key }}"
       aws_secret_key: "{{ ec2_secret_key }}"
       name: "{{ vpc_name }}" 
       cidr_block: "{{ vpcCidrBlock }}"
       region: "{{ region }}"
       # enable dns support 
       dns_support: yes
       # enable dns hostnames
       dns_hostnames: yes
       tenancy: default
       state: "{{ state }}"
       resource_tags: 
         Name: "{{ id }}vpc" 
     register: vpc
       

# create an internet gateway for the vpc
   - name: create ec2 vpc internet gateway       
     ec2_vpc_igw:
       aws_access_key: "{{ ec2_access_key }}"
       aws_secret_key: "{{ ec2_secret_key }}"
       vpc_id: "{{ vpc.vpc.id }}"
       region: "{{ region }}"
       state: "{{ state }}" 
       tags:
         Name: "{{ igw_name }}"
     register: igw_result
   

# create the subnet for the vpc with a cidr block
   - name: create ec2 vpc subnet
     ec2_vpc_subnet:
       aws_access_key: "{{ ec2_access_key }}"
       aws_secret_key: "{{ ec2_secret_key }}"
       vpc_id: "{{ vpc.vpc.id }}"
       region: "{{ region }}"
       state: "{{ state }}"
       cidr: "{{ subNetCidrBlock }}"
       # enable public ip
       map_public: yes
       resource_tags:
         Name: "{{ subnet_name }}"
     register: subnet_result
   
   
# create a security group for the vpc
   - name: create ec2 security group
     ec2_group:
       aws_access_key: "{{ ec2_access_key }}"
       aws_secret_key: "{{ ec2_secret_key }}"
       vpc_id: "{{ vpc.vpc.id }}"
       region: "{{ region }}"
       state: "{{ state }}"
       name: "{{ security_group_name }}"
       description: "Sec group for app {{ id }} "
       tags:
         Name: "{{ security_group_name  }}"
       rules:
       - proto: tcp
         ports:
         - 22
         cidr_ip: "{{ port22CidrBlock }}"
         rule_desc: allow all on port 22
     register: security_group_results
   
 

# create the access control list with ingress and egress ports
   - name: create ec2 VPC Network access control list
     ec2_vpc_nacl:
       aws_access_key: "{{ ec2_access_key }}"
       aws_secret_key: "{{ ec2_secret_key }}"
       vpc_id: "{{ vpc.vpc.id }}"
       region: "{{ region }}"
       state: "{{ state }}"
       name: "{{ acl_name }}"
       subnets: [ "{{ subnet_result.subnet.id }}" ]
       tags:
         Name: "{{ acl_name }}"
         Description: "Access control list for {{ id }}"
       # ingress acl rules
       ingress:
         # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
         # allow ingress port 22
         - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
         # allow ingress port 80
         - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
         # allow icmp
         - [300, 'icmp', 'allow', "{{ destinationCidrBlock }}", 0, 8]
         # allow ingress ephemeral ports
         - [400, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
       # egress acl rules
       egress:
         # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
         # allow egres port 22 
         - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
         # allow egres port 80 
         - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
         # allow egress ephemeral ports
         - [300, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
     register: acl_results

   
#Create route table and connect subnet to routes
   - name: create ec2 VPC public subnet route table
     ec2_vpc_route_table:
       aws_access_key: "{{ ec2_access_key }}"
       aws_secret_key: "{{ ec2_secret_key }}"
       vpc_id: "{{ vpc.vpc.id }}"
       region: "{{ region }}"
       state: "{{ state }}"
       tags:
         Name: "{{ route_table_name }}"
       subnets: [ "{{ subnet_result.subnet.id }}" ]
       
       # create routes
       routes:
         - dest: "{{ destinationCidrBlock }}" 
           gateway_id: "{{ igw_result.gateway_id }}"
     register: public_route_table
     

#Upload public key to AWS
   - name: Upload public key to AWS
     ec2_key:
       name: "{{ key_name }}"
       key_material: "{{ lookup('file', '~/.ssh/{{ key_name }}.pub') }}"
       region: "{{ region }}"
       aws_access_key: "{{ec2_access_key}}"
       aws_secret_key: "{{ec2_secret_key}}"
   

#Create EC2 instance
   - name: Provision instance
     ec2:
       aws_access_key: "{{ec2_access_key}}"
       aws_secret_key: "{{ec2_secret_key}}"
       key_name: "{{ key_name }}"
       id: "{{ id }}"
       region: "{{ region }}"
       vpc_subnet_id: "{{ subnet_result.subnet.id }}"
       group_id: "{{ security_group_results.group_id }}"
       image: "{{ image }}"
       instance_type: t2.micro
       wait: true
       instance_tags:
         name: "{{ id }}-EC2"
       count_tag:
         name: "{{ id }}-EC2"
       exact_count: 1
       assign_public_ip: yes
       
   
#Get running instance details
   - name: Facts
     block:
   
     - name: Get instances Information
       ec2_instance_info:
         aws_access_key: "{{ec2_access_key}}"
         aws_secret_key: "{{ec2_secret_key}}"
         region: "{{ region }}"
       register: result 
       

# print out new VPC, subnet id, security group, and EC2 instance
   - name: print out new vpc, subnet id, security group, and instance details for vpc
     debug:
       msg: "Following are the details of the infrastructure created from Ansible : {{ vpc_name }}; Use subnet id: {{ subnet_result.subnet.id }} ; security group: {{ security_group_results.group_id }} ; ID: {{ item.instance_id }} - State: {{ item.state.name }} - Public DNS: {{ item.public_dns_name }} "
     loop: "{{ result.instances }}"
